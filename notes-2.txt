This is the second part of the typescript course,
First course is a pre requisite

its better to typescript locally so that you can use different in each
project
once you have downloaded it , you can check it using npx tsc -v

before running npx tsc -w , ensure you have tsconfig.json in root folder

*****Chapter one

Part 1

: in tsconfig.json 
  target = version of js to be used, es5 , es6 etc
           esnext means = use the latest available version
  noEmit = do not produce the transpiled js code if set to true
  outdir = produce the transpiled code , if allowed, to this dire 
  includes = directory of the source ts files to be converted

Part 2 - adding ts to an already existing Js code
added app.js

: in tsconfig 
  allowJs : allow js files to be compiled too
  checkJs : check js files for type error too

: in app.js
  +unary operator converts value to a number, so the type of id should 
  match to number everywhere else

: JSDOC syntax
  this is an industry standard tool for annotating js language
  it is just a comment block with special syntax
  at the top of the js file add /** */ and let vscode autocomplete
  This will help ts to find errors in existing js file without having
  to write the entire code in ts
  It will look something like this : 
        /**
        * 
        * @param {*} contactId //parameter identified from code
        * @returns 
        */ 
   If we replace {*} with number , ts will check if all the params are 
   of type number and will throw an error if not

Part 3 : importing 3rd party apis

: In app.js we have used jquery syntax which is not recognized by ts
  and hence it throws an error. solution
  1. Create a type defination of the api yourself ( dont know how ?)
  2. Use the type defination made by others if library is open source
     search @types/jquery in npmjs.com and copy paste the command to 
     install jsquery's ts defination ( npm install --save @types/jquery)

******Chapter 2

Part 1 : about primitve types - covered in Part 1

Part 2 : custom types using interface - covered in Part 1

: interface defines the structure while classes define both the
  structure and implementation.
  Interfaces are not reflected in the transpiled js while classes do

: Using interface within each other 
    interface Address {
        line1 : string;
        line2? : string;
        district : string;
        state : string;
        pincode : number;
        country : string;
    }

    interface Contact extends Address {
        id : number;
        name: string;
        birthdate? : Date;
    }

Part 3 : Type Alias 

: type ContactName = string // we can use ContactName instead of String
  interface Contact extends Address {
        id : number;
        name: ContactName; 
        birthdate? : Date;
  }
  // if we want to change the type of all references to ContactName
     from string to number, we just need to make 1 change only.
 
Part 4 : Enums - covered in part 1

Part 5 : typing functions - covered in Part 1

Part 6 : generics - covered in Part 1

: some complicated examples 
    interface Contact {
        id : number;
        name: ContactName;
    }

    interface UserContact {
        id : number;
        name : ContactName;
        username : string
    } //usercontact is an extention of Contact

    let primaryContact : Contact = {
        id : 1,
        name : "test User",
    }

    function clone<T1, T2 extends T1>(source: T1): T2{
        return Object.apply({},source); //cloning structure of source
    } // putting a contraint that T2 should be an extention of T1

    const b = clone<Contact, UserContact>(primaryContact)
    //syntax for calling mutiple type tempelate funtion ^
    //if Contact had a property missing in UserContact, this function
    call would throw an error
    //b will be of type UserContact  

: generics can be applied to classes and interfaces too
    interface UserContact<T> {
        id : number
        name : ContactName
        username : T
    }
    const b = clone<Contact, UserContact<string>>(primaryContact)

Challenge 02 :

: This tempelate function excepts an Array of type T.
  Since we are using id property of each object in the Array we need
  to put a constraint on the Type T that it should include 
  an id property 

    function getNextId<T extends {id : number}>(items : T[]) : number {
        return items.reduce((max, x) => x.id > max ? x.id : max, 0) + 1
    }

****Chapter 3

Part 1 : Union types
: pipe syntax provides alternative types
  
: apersand syntax can provide union types
  type AddressAndContact = Contact & Address 
  let newContact : AddressAndContact // will have properties of both 
  interfaces

Part 2 : keyof operator

: type ContactField = keyof Contact
  const field: ContactField = "birthdate"
  //only allowed values for the fieldvariables are the key names
   of Contact Interface 

: better use of keyof operator
    function getValue<T>(source : T, propertyname : keyof T){
        return source[propertyname];
    }
    // this will ensure that the property name exists

    console.log(getValue(primaryContact, "birthdate"))
   
   If this was plain js, we could have made a typo while writing the
   name of the property and js would have happily returned undefined

: more powerful generic function
  function getValue<T, U extends keyof T>(source : T, propertyname : U){
    return source[propertyname];
  }
  //If we need to refer to "typeof T" in the getValue function later on
    we can do so by U instead of writin typeof T all the time

Part 3 - typeof

: To ensure object being passed is of a specific type before we 
  do some kind of permanent operation on the object like save lets say 
  const myType = { min: 1 , max : 200}
  function save(source : typeof myType){};


Part 4 - ensuring references have same types

:    interface ContactEvent {
        contactPostalCode : Contact["address"]["pincode"]
    }
    this will ensure that contactId has the same type as pincode 
    property of contact["address"] interface

: complex example
    interface ContactEvent {
        contactId: Contact["id"];
    } //referncing Contact Interface for contactID type

    interface ContactDeletedEvent extends ContactEvent { 
    } //inheriting for deleted event

    interface ContactStatusChangedEvent extends ContactEvent { 
        oldStatus: ContactStatus;
        newStatus: ContactStatus;
    } //inheriting for statuschanged event

    interface ContactEvents {
        deleted: ContactDeletedEvent;
        statusChanged: ContactStatusChangedEvent;
        // ... and so on
    } //merging both events

    function handleEvent<T extends keyof ContactEvents>(
        eventName: T, //this will be either deleted or statusChanged
        handler: (evt: ContactEvents[T]) => void //defining handler function which takes value from ContactEvent["deleted or statusChanged"] depending on the value of T and returns void
    ) {
        if (eventName === "statusChanged") { //In case of statusChanged event
            handler({ contactId: 1, oldStatus: "active", newStatus: "inactive" })
        } //handler function is called with contactStatusChangedEvent Object
    }

    handleEvent("statusChanged", evt => console.log(evt))
    //this call is made which defines what handler function will do
    i.e console.log() the value of ContactEvent[statusChanged] which is
    an object of ContactStatusChangedEvent
    the object is present in the variable evt.
    ts implicitly determines the type of evt based on the value of T
    when handler function is called    

Part 5 :

Record keyword
:   let x = {name : "Wayne"}
    x.id = 12; //this will work in js but not typescript

:   if we define let x as any then it will work but we are opting 
    out of ts type safety

:   a good way to have js flexibility & ts type safety would be record
    
    let x : Record<string, string | number | boolean | Function> = { name : "Wayne"}
    x.number = 123;
    x.active = true;
    x.log = () => console.log("dynamically added function")

    Record< type of name , type of values allowed >
    this is useful in scenarios where we dont know all the property
    of the object at the time of its defination

:   complex Example :
    we are trying to search contacts based on the given query
    we have a defined query interface which takes in sort and matches
    function as property
    we then define a function Search Contacts,
    which takes an array of contacts and query
    the query has property names equal to the contact names only
    and for each of those properties, value for searching the contacts
    is provided in the form of matches function.
    In the function we extract all properties one by one from each
    contact and run the corresponding matches function defined in the 
    query to see if it returns true for the current contacts extracted
    property.

    Note that query being passed at the bottom should have all the
    properties defined in contact interface. I have commented the 
    props in Contact which are not present in the query record object
    being passed

    interface Query {
        sort?: 'asc' | 'desc';
        matches(val): boolean;
    }

    function searchContacts(contacts: Contact[], query: Record<keyof Contact,Query>) {
        return contacts.filter(contact => {
            for (const property of Object.keys(contact)) {
                // get the query object for this property
                const propertyQuery = query[property];
                // check to see if it matches
                if (propertyQuery && propertyQuery.matches(contact[property])) {
                    return true;
                }
            }

            return false;
        })
    }

    const filteredContacts = searchContacts(
        [/* contacts */],
        {
            id: { matches: (id) => id === 123 },
            name: { matches: (name) => name === "Carol Weaver" },
        // phoneNumber: { matches: (name) => name === "Carol Weaver" },
        }
    );

**Chapter 4

Part 1
: In the previous example we had to comment those props in Contact 
Interface which were not being passed in the query record object.

: To select only a subset of the Contact Interface props as keys
 for query Record Object we use Partials

    type ContactQuery = Partial<Record<keyof Contact,Query>>

    function searchContacts(contacts: Contact[], query: ContactQuery) {
        return contacts.filter(contact => {
            for (const property of Object.keys(contact)) {
                const propertyQuery = query[property];
                if (propertyQuery && propertyQuery.matches(contact[property])) {
                    return true;
                }
            }
            return false;
        })
    }

: if we want to exclude a subset of the properties of Contacts from 
  being queried on we can use :

    type ContactQuery = Omit<
        Partial<
            Record<keyof Contact,Query> 
        >,
        "address" | "status"
    > //this will omit address and status

:if we want to include only a few fixed properties of contacts no
 matter how many other props get added we can use Pick

    type ContactQuery = Pick<
        Partial<
            Record<keyof Contact,Query> 
        >,
        "id" | "name"
    > //this will include id and name only

: The Required keyword will make all the props of Contacts as Required

Part 2: 
: creating interfaces using maps
    type ContactQuery = {
        [TProp in keyof Contact]? : query //used for iterating over 
    } //all the properties one by one.
    
: One use of this method is to assign type to the params of the
  matches function depending on the Contact property to which this 
  Query interface object(which has the matches function) is being 
  added to.

    interface Query<Tprop> {
        sort?: 'asc' | 'desc';
        matches(val: Tprop): boolean;
    }

    type ContactQuery = {
        [TProp in keyof Contact]? : Query<Contact[TProp]>
    }

    function searchContacts(contacts: Contact[], query: ContactQuery) {
        return contacts.filter(contact => {
            for (const property of Object.keys(contact) as (keyof Contact)[]) {
                const propertyQuery = query[property] as Query<Contact[keyof Contact]>;
                if (propertyQuery && propertyQuery.matches(contact[property])) {
                    return true;
                }
            }
            return false;
        })
    }   
    //at line 366 : we have defined the type of property variable
                    using the as syntax.
    //at line 367 : we have defined the type of PropertyQuery using 
                    the as syntax
    // defining type of all variables helps typescript and reduces
       the chances of compile time and run time error by being more
       explicit
    
    Now ts will infer the type of parameter in the matches 
    function correctly depending on the Contact Property name
    ,the Query Object ( containing the matches function as prop)
    is attached to. 

    const filteredContacts = searchContacts(
        [/* contacts */],
        {
            id: { matches: (id) => id === 123 },
            name: { matches: (name) => name === "Carol Weaver" },
        }
    );

: Records wont be able to achieve this feat because the assign 
  the properties as a whole and not one by one as in maps

***Chapter 05

Part 1 : Decorators

:Decorators is a proposed adddition to js, once the proposal is 
 finalized its implementation may be different. Regardless ts 
 encourages to use this
: to use decorators set  "experimentalDecorators": true
  in compilerOptions in tsconfig

: In this function

    const currentUser = {
        id: 1234,
        roles: ["ContactEditor"],
        isAuthenticated(): boolean {
            return true
        },
        isInRole(role: string): boolean {
            return this.roles.contains(role);
        }
    }   

    class ContactRepository {
        private contacts: Contact[] = [];

        getContactById(id: number): Contact | null {
            console.trace(`ContactRepository.getContactById: BEGIN`);

            if (!currentUser.isInRole("ContactViewer")) {
                throw Error("User not authorized to execute this action");
            }

            const contact = this.contacts.find(x => x.id === id);

            console.debug(`ContactRepository.getContactById: END`);

            return contact;
        }

        save(contact: Contact): void {
            console.trace(`ContactRepository.save: BEGIN`);

            if (!currentUser.isInRole("ContactEditor")) {
                throw Error("User not authorized to execute this action");
            }

            const existing = this.getContactById(contact.id);

            if (existing) {
                Object.assign(existing, contact);
            } else {
                this.contacts.push(contact);
            }

            console.debug(`ContactRepository.save: END`);
        }
    }

//we can replace the logging statement to track the start and begin of every function
  and to grant role based access using 

    @log
    class ContactRepository {
        private contacts: Contact[] = [];

        @authorize("ContactViewer")
        getContactById(id: number): Contact | null {
            const contact = this.contacts.find(x => x.id === id);

            return contact;
        }

        @authorize("ContactEditor")
        save(contact: Contact): void {
            const existing = this.getContactById(contact.id);

            if (existing) {
                Object.assign(existing, contact);
            } else {
                this.contacts.push(contact);
            }
        }
    }


: to use declerator metadata or pollyfills feature do the following :
  1. set "emitDecoratorMetadata": true in compilerOptions
  2. Download npm i reflect-metadata --save

 // this is also a proposed feature which ts can access early
    as compared to js

Part 2 : Actually writing the decorator function

:   //syntax of the function decorator
    function authorize(target: any, property: string, descriptor: PropertyDescriptor) {
        const wrapped = descriptor.value //storing the previous function's value
        descriptor.value = function () { //defining a new custom descriptor
            if (!currentUser.isAuthenticated()) {
                throw Error("User is not authenticated");
            }

            return wrapped.apply(this, arguments); //calling the old function from within
        }
    } 

    //the descriptor is an object of type PropertyDescriptor whose value property holds
      the function above which the decorator was called.
      we are going to simply write a custom function and then call the previous function
      within our new function

Part 3 - Decorator factory

: Note that in the decorator function we cannnot pass our own params , then how will we
  pass the role like this authorize("ContactViewer") ? 
  Answer is using a decorator factory.

:   function authorize(role: string) { //decorator factory
        return function authorizeDecorator(target: any, property: string, descriptor: PropertyDescriptor) {
            const wrapped = descriptor.value

            descriptor.value = function () {
                if (!currentUser.isAuthenticated()) {
                    throw Error("User is not authenticated");
                }
                if (!currentUser.isInRole(role)) {
                    throw Error(`User not in role ${role}`);
                }

                return wrapped.apply(this, arguments);
            }
        }
    }

    //Here the decorator factory provides the necessary params to 
      decorator for better customization of the function logic and
      finally returns the decorator

Part 4 : Class Decorator

:  function freeze(constructor: Function) {
        Object.freeze(constructor)
        Object.freeze(constructor.prototype)
    }

   @freeze
   class ContactRepository{
    ...
   }

   //decorator class takes in the constructor of the class
     as parameter and then would redefine the class properties 
     at runtime.

    //In this example we have disabled the modification of the class's
      attribute and its function by redefining the class constructor

: If we want to add properties and attributes to the class at runtime we 
  can use the below example :

    function singleton<T extends { new(...args: any[]): {} }>(constructor: T) {
        return class Singleton extends constructor {
            static _instance = null;

            constructor(...args) {
                super(...args);
                if (Singleton._instance) {
                    throw Error("Duplicate instance")
                }

                Singleton._instance = this
            }
        }
    }

    // the above function returns a redefined class with a new property _instance
       which points to the first instance of the class.
       Since we are redefining a class using a constructor, we will have to impose
       a constraint on the constructor being accepted to be of a specific type 
       which is implemented using generics.
    
    // We then redefine the constructor within the new class, by passing the args of 
    the original class constructor which we have captured using tempelates, i.e ...args

    // To mimic the behaviour of the original constructor within the new constructor
       we call original constructor using the super() method
    
    //It is now that we add our own logic within the consructor to either point to the
    first instance of this class or throw an error if an instance has already been declared

Part 5 : Property Decorator

: called just above the property/attribute of a class
  used to redefine the properties

: example : 
    
    // takes two params source object and the propertyname
    function auditable(target: object, key: string | symbol) {

        // get the initial value, before the decorator is applied
        let val = target[key];

        // then overwrite the property with a custom getter and setter
        Object.defineProperty(target, key, {
            get: () => val,  //if we try to fetch the value of the property, return the initial value i.e val
            set: (newVal) => { //if new value of the property is being set then print the followin on console
                console.log(`${key.toString()} changed: `, newVal);
                val = newVal; // also set the new value
            },
            enumerable: true, //beyond the scope of this course
            configurable: true //beyond the scope of this course
        })
    }

****Chapter 06 

